const generatedBibEntries = {
  "Abdelnabi2021": {
    "abstract": "",
    "author": "Abdelnabi, Esra A. and Maatuk, Abdelsalam M. and Hagal, Mohammed",
    "doi": "10.1109/MI-STA52233.2021.9464433",
    "journal": "2021 IEEE 1st International Maghreb Meeting of the Conference on Sciences and Techniques of Automatic Control and Computer Engineering MI-STA",
    "keywords": "",
    "number": "",
    "publisher": "IEEE",
    "series": "",
    "title": "Generating UML Class Diagram from Natural Language Requirements: A Survey of Approaches and Techniques",
    "type": "proceedings-article",
    "url": "https://doi.org/10.1109/mi-sta52233.2021.9464433",
    "volume": "",
    "year": "2021"
  },
  "Abdouli2016": {
    "abstract": "",
    "author": "Abdouli, Mariem and Ben Abdessalem Karaa, Wahiba and Ghezala, Henda Ben",
    "doi": "10.1109/SERA.2016.7516136",
    "journal": "2016 IEEE 14th International Conference on Software Engineering Research, Management and Applications (SERA)",
    "keywords": "",
    "number": "",
    "publisher": "IEEE",
    "series": "",
    "title": "Survey of works that transform requirements into UML diagrams",
    "type": "proceedings-article",
    "url": "https://doi.org/10.1109/sera.2016.7516136",
    "volume": "",
    "year": "2016"
  },
  "Elallaoui2018": {
    "abstract": "",
    "author": "Elallaoui, Meryem and Nafil, Khalid and Touahni, Raja",
    "doi": "10.1016/j.procs.2018.04.010",
    "journal": "Procedia Computer Science",
    "keywords": "",
    "number": "",
    "publisher": "Elsevier BV",
    "series": "",
    "title": "Automatic Transformation of User Stories into UML Use Case Diagrams using NLP Techniques",
    "type": "journal-article",
    "url": "https://doi.org/10.1016/j.procs.2018.04.010",
    "volume": "130",
    "year": "2018"
  },
  "Ferrari2024": {
    "abstract": "",
    "author": "Ferrari, Alessio and Abualhaija, Sallam and Arora, Chetan",
    "doi": "10.1109/REW61692.2024.00044",
    "journal": "2024 IEEE 32nd International Requirements Engineering Conference Workshops (REW)",
    "keywords": "",
    "number": "",
    "publisher": "IEEE",
    "series": "",
    "title": "Model Generation with LLMs: From Requirements to UML Sequence Diagrams",
    "type": "proceedings-article",
    "url": "https://doi.org/10.1109/rew61692.2024.00044",
    "volume": "",
    "year": "2024"
  },
  "Ben Abdessalem Karaa2016": {
    "abstract": "<jats:title>Summary</jats:title><jats:p>Software development life cycle is a structured process, including the definition of user requirements specification, the system design, and programming. The design task comprises the transfer of natural language specifications into models. The class diagram of Unified Modeling Language has been considered as one of the most useful diagrams. It is a formal description of user's requirements and serves as inputs to the developers. The automated extraction of UML class diagram from natural language requirements is a highly challenging task. This paper explains our vision of an automated tool for class diagram generation from user requirements expressed in natural language. Our new approach amalgamates the statistical and pattern recognition properties of natural language processing techniques. More than 1000 patterns are defined for the extraction of the class diagram concepts. Once these concepts are captured, an XML Metadata Interchange file is generated and imported with a Computer‐Aided Software Engineering tool to build the corresponding UML class diagram. Copyright © 2015 John Wiley &amp; Sons, Ltd.</jats:p>",
    "author": "Ben Abdessalem Karaa, Wahiba and Ben Azzouz, Zeineb and Singh, Aarti and Dey, Nilanjan and S. Ashour, Amira and Ben Ghazala, Henda",
    "doi": "10.1002/spe.2384",
    "journal": "Software: Practice and Experience",
    "keywords": "",
    "number": "11",
    "publisher": "Wiley",
    "series": "",
    "title": "Automatic builder of class diagram (ABCD): an application of UML generation from functional requirements",
    "type": "journal-article",
    "url": "https://doi.org/10.1002/spe.2384",
    "volume": "46",
    "year": "2016"
  },
  "Mohanan2018": {
    "abstract": "<jats:p> This article has been retracted due to partial plagiarism and the author Murali Mohanan takes full responsibility for the partial plagiarism detected. A notice of retraction is published in Vol. 27 No. 8 </jats:p>",
    "author": "Mohanan, Murali and Samuel, Philip",
    "doi": "10.1142/S0218213018500276",
    "journal": "International Journal on Artificial Intelligence Tools",
    "keywords": "",
    "number": "06",
    "publisher": "World Scientific Pub Co Pte Lt",
    "series": "",
    "title": "Natural Language Processing Approach for UML Class Model Generation from Software Requirement Specifications via SBVR",
    "type": "journal-article",
    "url": "https://doi.org/10.1142/s0218213018500276",
    "volume": "27",
    "year": "2018"
  },
  "Yue2015": {
    "abstract": "<jats:p>The transition from an informal requirements specification in natural language to a structured, precise specification is an important challenge in practice. It is particularly so for object-oriented methods, defined in the context of the OMG's Model Driven Architecture (MDA), where a key step is to transition from a use case model to an analysis model. However, providing automated support for this transition is challenging, mostly because, in practice, requirements are expressed in natural language and are much less structured than other kinds of development artifacts. Such an automated transformation would enable at least the generation of an initial, likely incomplete, analysis model and enable automated traceability from requirements to code, through various intermediate models. In this article, we propose a method and a tool called aToucan, building on existing work, to automatically generate a UML analysis model comprising class, sequence and activity diagrams from a use case model and to automatically establish traceability links between model elements of the use case model and the generated analysis model. Note that our goal is to save effort through automated support, not to replace human abstraction and decision making.</jats:p>\n          <jats:p>Seven (six) case studies were performed to compare class (sequence) diagrams generated by aToucan to the ones created by experts, Masters students, and trained, fourth-year undergraduate students. Results show that aToucan performs well regarding consistency (e.g., 88% class diagram consistency) and completeness (e.g., 80% class completeness) when comparing generated class diagrams with reference class diagrams created by experts and Masters students. Similarly, sequence diagrams automatically generated by aToucan are highly consistent with the ones devised by experts and are also rather complete, for instance, 91% and 97% message consistency and completeness, respectively. Further, statistical tests show that aToucan significantly outperforms fourth-year engineering students in this respect, thus demonstrating the value of automation. We also conducted two industrial case studies demonstrating the applicability of aToucan in two different industrial domains. Results showed that the vast majority of model elements generated by aToucan are correct and that therefore, in practice, such models would be good initial models to refine and augment so as to converge towards to correct and complete analysis models. A performance analysis shows that the execution time of aToucan (when generating class and sequence diagrams) is dependent on the number of simple sentences contained in the use case model and remains within a range of a few minutes. Five different software system descriptions (18 use cases altogether) were performed to evaluate the generation of activity diagrams. Results show that aToucan can generate 100% complete and correct control flow information of activity diagrams and on average 85% data flAow information completeness. Moreover, we show that aToucan outperforms three commercial tools in terms of activity diagram generation.</jats:p>",
    "author": "Yue, Tao and Briand, Lionel C. and Labiche, Yvan",
    "doi": "10.1145/2699697",
    "journal": "ACM Transactions on Software Engineering and Methodology",
    "keywords": "",
    "number": "3",
    "publisher": "Association for Computing Machinery (ACM)",
    "series": "",
    "title": "aToucan",
    "type": "journal-article",
    "url": "https://doi.org/10.1145/2699697",
    "volume": "24",
    "year": "2015"
  }
};