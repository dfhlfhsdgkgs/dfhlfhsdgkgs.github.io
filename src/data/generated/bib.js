const generatedBibEntries = {
    "Abdelnabi2021": {
    "abstract": "In the last years, many methods and tools for generating Unified Modeling Language (UML) class diagrams from natural language (NL) software requirements. These methods and tools deal with the transformation of NL textual requirements to UML diagrams. The transformation process involves analyzing NL requirements and extracting relevant information from the text to generate UML class models. This paper aims to survey the existing works of transforming textual requirements into UML class models to indicate their strengths and limitations. The paper provides a comprehensive explanation and evaluation of the existing approaches and tools. The automation degree, efficiency, and completeness, as well as the used techniques, are studied and analyzed. The study demonstrated the necessity of automating the process, in addition to combining artificial intelligence with engineering requirements and using Natural Language Processing (NLP) techniques to extract class diagrams from NL requirements.",
    "author": "Abdelnabi, Esra A. and Maatuk, Abdelsalam M. and Hagal, Mohammed",
    "doi": "10.1109/mi-sta52233.2021.9464433",
    "journal": "2021 IEEE 1st International Maghreb Meeting of the Conference on Sciences and Techniques of Automatic Control and Computer Engineering MI-STA",
    "keywords": "type:Conferences,Unified modeling language,Semantics,Automatic generation control,Tools,Linguistics,Natural language processing",
    "number": "01",
    "pages":"",
    "publisher": "IEEE",
    "series": "mi-sta",
    "title": "Generating {UML} Class Diagram from Natural Language Requirements: A Survey of Approaches and Techniques",
    "type": "article",
    "url": "https://doi.org/10.1109/mi-sta52233.2021.9464433",
    "volume": "1",
    "year": "2021"
  },
  "Abdouli2016": {
    "abstract": "In this paper, we aim to cover works that are related to the process of transforming requirements into UML diagrams, from the first works which were manual techniques in 1976, to automatic tools in 2015. In this context, we try to exhibit different approaches and to indicate their strength as well as their shortcomings. This work will help us to evaluate existing approaches and propose other alternatives for Requirement Engineering. The objective of this paper is to present an overview of various works dedicated to requirement analysis and a comparative study of these works. Also, we tried to discuss the combination of Artificial Intelligence with Requirement Engineering.",
    "author": "Abdouli, Mariem and Ben Abdessalem Karaa, Wahiba and Ghezala, Henda Ben",
    "doi": "10.1109/SERA.2016.7516136",
    "journal": "2016 IEEE 14th International Conference on Software Engineering Research, Management and Applications (SERA)",
    "keywords": "type:Unified modeling language,Software,Inspection,Pragmatics,Requirements engineering,Computational modeling,Measurement",
    "number": "",
    "publisher": "IEEE",
    "series": "",
    "title": "Survey of works that transform requirements into {UML} diagrams",
    "type": "proceedings-article",
    "url": "https://doi.org/10.1109/sera.2016.7516136",
    "volume": "",
    "year": "2016"
  },
  "Elallaoui2018": {
    "abstract": "Agile methods in general and the Scrum method in particular are gaining more and more trust from the software developer community. When it comes to writing a functional requirement, user stories become more and more usable by the community. Furthermore, a considerable effort has already been made by the community in relation to the use of the use case tool when drafting requirements and in terms of model transformation. We have reached a certain stage of maturity at this level. The idea of our paper is to profit from these richness and to invest it in the drafting of user stories. In this paper, we propose a process of transforming user stories into use cases and we will be able to benefit from all the work done in the transformation of the models according to the MDA approach. To do this, we used natural language processing (NLP) techniques, by applying TreeTagger parser. Our work was validated by a case study where we were able to obtain very positive precisions between 87% and 98%.",
    "author": "Elallaoui, Meryem and Nafil, Khalid and Touahni, Raja",
    "doi": "10.1016/j.procs.2018.04.010",
    "journal": "Procedia Computer Science",
    "keywords": "type:User Stories;UML;Use Case;NLP;MDA",
    "number": "",
    "publisher": "Elsevier BV",
    "series": "",
    "title": "Automatic Transformation of User Stories into {UML} Use Case Diagrams using {NLP} Techniques",
    "type": "journal-article",
    "url": "https://doi.org/10.1016/j.procs.2018.04.010",
    "volume": "130",
    "year": "2018"
  },
  "Ferrari2024": {
    "abstract": "Complementing natural language (NL) requirements with graphical models can improve stakeholders' communication and provide directions for system design. However, creating models from requirements involves manual effort. The advent of generative large language models (LLMs), ChatGPT being a notable example, offers promising avenues for automated assistance in model generation. This paper investigates the capability of ChatGPT to generate a specific type of model, i.e., UML sequence diagrams, from NL requirements. We conduct a qualitative study in which we examine the sequence diagrams generated by ChatGPT for 28 requirements documents of various types and from different domains. Observations from the analysis of the generated diagrams have systematically been captured through evaluation logs, and categorized through thematic analysis. Our results indicate that, although the models generally conform to the standard and exhibit a reasonable level of understandability, their completeness and correctness with respect to the specified requirements often present challenges. This issue is particularly pronounced in the presence of requirements smells, such as ambiguity and inconsistency. The insights derived from this study can influence the practical utilization of LLMs in the RE process, and open the door to novel RE-specific prompting strategies targeting effective model generation.",
    "author": "Ferrari, Alessio and Abualhaija, Sallam and Arora, Chetan",
    "doi": "10.1109/REW61692.2024.00044",
    "journal": "2024 IEEE 32nd International Requirements Engineering Conference Workshops (REW)",
    "keywords": "type:Large language models,Unified modeling language,Manuals,Chatbots,Stakeholders,Requirements engineering,Reliability,Standards,System analysis and design,Context modeling",
    "number": "",
    "publisher": "IEEE",
    "series": "",
    "title": "Model Generation with LLMs: From Requirements to {UML} Sequence Diagrams",
    "type": "proceedings-article",
    "url": "https://doi.org/10.1109/rew61692.2024.00044",
    "volume": "",
    "year": "2024"
  },
  "Ben Abdessalem Karaa2016": {
    "abstract": "Software development life cycle is a structured process, including the definition of user requirements specification, the system design, and programming. The design task comprises the transfer of natural language specifications into models. The class diagram of Unified Modeling Language has been considered as one of the most useful diagrams. It is a formal description of user's requirements and serves as inputs to the developers. The automated extraction of UML class diagram from natural language requirements is a highly challenging task. This paper explains our vision of an automated tool for class diagram generation from user requirements expressed in natural language. Our new approach amalgamates the statistical and pattern recognition properties of natural language processing techniques. More than 1000 patterns are defined for the extraction of the class diagram concepts. Once these concepts are captured, an XML Metadata Interchange file is generated and imported with a Computer-Aided Software Engineering tool to build the corresponding UML class diagram. Copyright © 2015 John Wiley & Sons, Ltd.",
    "author": "Ben Abdessalem Karaa, Wahiba and Ben Azzouz, Zeineb and Singh, Aarti and Dey, Nilanjan and S. Ashour, Amira and Ben Ghazala, Henda",
    "doi": "10.1002/spe.2384",
    "journal": "Software: Practice and Experience",
    "keywords": "type:class diagram,user's requirements,Unified Modeling Language,model driven architecture,XML Metadata Interchange,natural language processing",
    "number": "11",
    "publisher": "Wiley",
    "series": "",
    "title": "Automatic builder of class diagram (ABCD): an application of {UML} generation from functional requirements",
    "type": "journal-article",
    "url": "https://doi.org/10.1002/spe.2384",
    "volume": "46",
    "year": "2016"
  },
  "Mohanan2018": {
    "abstract": "This article has been retracted due to partial plagiarism and the author Murali Mohanan takes full responsibility for the partial plagiarism detected. A notice of retraction is published in Vol. 27 No. 8",
    "author": "Mohanan, Murali and Samuel, Philip",
    "doi": "10.1142/S0218213018500276",
    "journal": "International Journal on Artificial Intelligence Tools",
    "keywords": "type:Requirement analysis,natural language processing,object oriented modeling,software requirement specification,UML class diagrams",
    "number": "06",
    "publisher": "World Scientific Pub Co Pte Lt",
    "series": "",
    "title": "Natural Language Processing Approach for {UML} Class Model Generation from Software Requirement Specifications via SBVR",
    "type": "journal-article",
    "url": "https://doi.org/10.1142/s0218213018500276",
    "volume": "27",
    "year": "2018"
  },
  "Yue2015": {
    "abstract": "The transition from an informal requirements specification in natural language to a structured, precise specification is an important challenge in practice. It is particularly so for object-oriented methods, defined in the context of the OMG's Model Driven Architecture (MDA), where a key step is to transition from a use case model to an analysis model. However, providing automated support for this transition is challenging, mostly because, in practice, requirements are expressed in natural language and are much less structured than other kinds of development artifacts. Such an automated transformation would enable at least the generation of an initial, likely incomplete, analysis model and enable automated traceability from requirements to code, through various intermediate models. In this article, we propose a method and a tool called aToucan, building on existing work, to automatically generate a UML analysis model comprising class, sequence and activity diagrams from a use case model and to automatically establish traceability links between model elements of the use case model and the generated analysis model. Note that our goal is to save effort through automated support, not to replace human abstraction and decision making.",
    "author": "Yue, Tao and Briand, Lionel C. and Labiche, Yvan",
    "doi": "10.1145/2699697",
    "journal": "ACM Transactions on Software Engineering and Methodology",
    "keywords": "type:Use case modeling, analysis model, UML, class diagram, sequence diagram, activity diagram, transformation, traceability, automation",
    "number": "3",
    "publisher": "Association for Computing Machinery (ACM)",
    "series": "",
    "title": "aToucan: An Automated Framework to Derive {UML} Analysis Models from Use Case Models",
    "type": "journal-article",
    "url": "https://doi.org/10.1145/2699697",
    "volume": "24",
    "year": "2015"
  },
  "SBVR2011": {
    "abstract": "In this paper, we present a novel approach of translating natural languages specification to SBVR business rules. The business rules constraint business structure or control behaviour of a business process. In modern business modelling, one of the important phases is writing business rules. Typically, a business rule analyst has to manually write hundreds of business rules in a natural language (NL) and then manually translate NL specification of all the rules in a particular rule language such as SBVR, or OCL, as required. However, the manual translation of NL rule specification to formal representation as SBVR rule is not only difficult, complex and time consuming but also can result in erroneous business rules. In this paper, we propose an automated approach that automatically translates the NL (such as English) specification of business rules to SBVR (Semantic Business Vocabulary and Rules) rules. The major challenge in NL to SBVR translation was complex semantic analysis of English language. We have used a rule based algorithm for robust semantic analysis of English and generate SBVR rules. Automated generation of SBVR based Business rules can help in improved and efficient constrained business aspects in a typical business modelling.",
    "author": "Imran S ,Bajwa and Mark G,Lee and Behzad,Bordbar",
    "doi": "",
    "journal": "AAAI 2011 Spring Symposium (SS-11-03)",
    "keywords": "type:SBVR, Business Rules, Natural Language,OCL",
    "number": "2",
    "publisher": "AAAI",
    "series": "",
    "title": "{SBVR} Business Rules Generation from Natural Language Specification.",
    "type": "journal-article",
    "url": "https://citeseerx.ist.psu.edu/document?repid=rep1&type=pdf&doi=34b376490098b61479ee3c6b3477047ed1f8829a",
    "volume": "24",
    "year": "2011"
  },
  "CMBuilder2003": {
    "abstract": "Graphical CASE (Computer Aided Software Engineering) tools provide considerable help in documenting the output of the Analysis and Design stages of software development and can assist in detecting incompleteness and inconsistency in an analysis. However, these tools do not contribute to the initial, difficult stage of the analysis process, that of identifying the object classes, attributes and relationships used to model the problem domain. This paper describes an NL-Based CASE tool called Class Model Builder (CM-Builder) which aims at supporting this aspect of the Analysis stage of software development in an Object-Oriented framework. CM-Builder uses robust Natural Language Processing techniques to analyse software requirements texts written in English and constructs, either automatically or interactively with an analyst, an initial UML Class Model representing the object classes mentioned in the text and the relationships among them. The initial model can be directly input to a graphical CASE tool for further refinement by a human analyst. CM-Builder has been quantitatively evaluated in blind trials against a collection of unseen software requirements texts and we present the results of this evaluation, together with the evaluation method. The results are very encouraging and demonstrate that tools such as CM-Builder have the potential to play an important role in the software development process.",
    "author": "H.M,Harmain and R,Gaizauskas",
    "doi": "10.1023/a:1022916028950",
    "journal": "",
    "keywords": "type:Analysis,NL-Based",
    "number": "157",
    "publisher": "",
    "series": "",
    "title": "CM-Builder: A Natural Language-Based {CASE} Tool for Object-Oriented Analysis",
    "type": "journal-article",
    "url": "https://doi.org/10.1023/a:1022916028950",
    "volume": "10",
    "year": "2003"
  },
  "OOPS2002": {
    "abstract": "The main goal of the NL-OOPS (acronym for Natural Language – Object-Oriented Production System) project is to develop a tool supporting object-oriented analysis using natural language (NL) processing. Requirements documents are analysed with LOLITA, a large-scale NL processing system, developed at Durham University and 3F Ltd. Both, the knowledge in the documents and that already stored in the knowledge base of LOLITA can then be used to produce requirements models at different levels of detail. Object oriented modelling is based on a two-phase algorithm for the identification of classes and associations. Moreover, the latest version of NL-OOPS supports traceability between the original input texts, their representation in LOLITA and the final models. To illustrate the main features and the performance of the tools we refer to the Automated Teller Machine study case described by the authors of the Object Modeling Technique. 1. Introduction The NL-OOPS project started in 1994 as a collaboration between the University of Trento (I) and the University of Durham (UK). The main goal of this project is to develop a CASE tool supporting requirements analysis by generating object oriented conceptual models from requirements documents in NL. Many authors have proposed the idea of extracting object from NL documents, starting from Abbot in 1983, and for entity-relationship diagrams it is older still. Our approach is based on the consideration that requirements are often written in unrestricted",
    "author": "L,Mich and R,Garigliano",
    "doi": "10.2495/DATA020321",
    "journal": "",
    "keywords": "type:Analysis,NLP",
    "number": "157",
    "publisher": "",
    "series": "",
    "title": "{NL-OOPS}: A Requirements Analysis Tool Based On Natural Language Processing",
    "type": "WIT Press",
    "url": "https://doi.org/10.2495/DATA020321",
    "volume": "28",
    "year": "2002"
  }
};